// Generated by CoffeeScript 1.7.1
(function() {
  var EasyRpc, defaultApiVersion, defaultPort, defaultRedisHost, emitter, redis, _,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  redis = require('redis');

  _ = require('underscore');

  emitter = require('events').EventEmitter;

  defaultRedisHost = '127.0.0.1';

  defaultPort = 6379;

  defaultApiVersion = '1.0';

  EasyRpc = (function(_super) {
    __extends(EasyRpc, _super);

    function EasyRpc(local_address, remote_address, api_list, options) {
      this.local_address = local_address;
      this.remote_address = remote_address;
      options = options || {};
      this.host = options.host || defaultRedisHost;
      this.port = options.port || defaultPort;
      this.api_response_pending = {};
      this.redisClientS = redis.createClient(this.port, this.host);
      this.redisClientR = redis.createClient(this.port, this.host);
      this.sendMessages({
        jsonrpc: defaultApiVersion,
        method: 'connect',
        params: {
          api_list: api_list
        }
      });
      this.readMessages();
    }

    EasyRpc.prototype.readMessages = function() {
      return this.redisClientR.brpop(this.local_address + 'easyrpc_mesg_q', 0, (function(_this) {
        return function(err, data) {
          var callback, message_object;
          if (err) {
            throw "Stopping readMessages loop as recieved error from redis " + err;
          }
          message_object = JSON.parse(data[1]);
          switch (message_object.method) {
            case 'connect':
              _this.remote_api_list = message_object.params.api_list;
              _.each(_this.remote_api_list, function(remote_api) {
                return EasyRpc.prototype[remote_api] = function(params, callback) {
                  return _this.redisClientR.incr('easyrpc_ApiResponseCounter', function(err, id) {
                    if (err) {
                      callback(err, null);
                      return;
                    }
                    _this.api_response_pending[id] = callback;
                    return _this.sendMessages({
                      jsonrpc: defaultApiVersion,
                      method: 'ApiPost',
                      api: remote_api,
                      id: id,
                      params: params
                    });
                  });
                };
              });
              _this.emit('connect');
              break;
            case 'ApiPost':
              _this.emit(message_object.api, message_object.params, function(err, result) {
                return _this.sendMessages({
                  jsonrpc: defaultApiVersion,
                  method: 'ApiResponse',
                  api: message_object.api,
                  id: message_object.id,
                  params: {
                    err: err,
                    result: result
                  }
                });
              });
              break;
            case 'ApiResponse':
              callback = _this.api_response_pending[message_object.id];
              if (callback) {
                callback(message_object.params.err, message_object.params.result);
                delete _this.api_response_pending[message_object.id];
              }
              break;
            default:
              _this.emit(message_object.method, message_object.params);
          }
          return _this.readMessages();
        };
      })(this));
    };

    EasyRpc.prototype.sendMessages = function(message) {
      var message_str;
      message_str = JSON.stringify(message);
      return this.redisClientS.lpush(this.remote_address + 'easyrpc_mesg_q', message_str, function(err, res) {
        if (err) {
          throw "pressMsgSender: Error sending message " + message_str;
        }
      });
    };

    return EasyRpc;

  })(emitter);

  module.exports = EasyRpc;

}).call(this);
